name: Deploy to Server

on:
  push:
    branches:
      - main
      - deploy
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DEPLOY_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Set deployment target
        id: set-target
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          fi

          if [[ "$DEPLOY_ENV" == "production" ]]; then
            echo "Using production deployment target"
            echo "APP_URL=http://${{ secrets.SSH_HOST }}:4000" >> $GITHUB_ENV
          else
            echo "Using staging deployment target"
            echo "APP_URL=http://${{ secrets.SSH_HOST }}:3000" >> $GITHUB_ENV
          fi

      - name: Copy deployment script
        run: |
          scp -P ${{ secrets.SSH_PORT }} deploy.sh nara@${{ secrets.SSH_HOST }}:${{ vars.BASE_DIR }}

      - name: Deploy to Server
        id: deploy
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} nara@${{ secrets.SSH_HOST }} "bash ${{ vars.BASE_DIR }}/deploy.sh ${{ env.DEPLOY_ENV }}" || echo "::set-output name=status::failed"

      - name: Check deployment status
        if: steps.deploy.outputs.status == 'failed'
        run: |
          echo "Deployment failed!"
          exit 1

      - name: Send deployment notification
        run: |
          echo "Deployed to ${{ env.DEPLOY_ENV }} environment"
          echo "Application URL: ${{ env.APP_URL }}"
